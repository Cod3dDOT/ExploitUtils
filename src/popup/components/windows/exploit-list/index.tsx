import { useState } from 'react';

import type { IExploit } from '~lib/exploits/interfaces';

import { ExploitWindow } from '../exploit';
import { ExploitSelectButton } from './exploit-select-button';

interface ExploitListWindowProps {
	exploits: IExploit[];
}

export const ExploitListWindow: React.FC<ExploitListWindowProps> = ({
	exploits
}) => {
	const [selectedExploit, setSelectedExploit] = useState<IExploit>();
	return (
		<div className="p-1.5 text-center">
			<div className="max-h-40 overflow-y-auto">
				{!selectedExploit ? (
					exploits.map((exploit) => {
						return (
							<ExploitSelectButton
								key={'exploit-selector-' + exploit.uid}
								exploit={exploit}
								onExploitCallback={() =>
									setSelectedExploit(exploit)
								}
								onStartCallback={() => {
									setSelectedExploit(undefined);
								}}
							/>
						);
					})
				) : (
					<ExploitWindow
						exploit={selectedExploit}
						onBackCallback={() => {
							setSelectedExploit(undefined);
						}}
						onStartCallback={() => {
							setSelectedExploit(undefined);
						}}
					/>
				)}
			</div>
		</div>
	);
};
