/* eslint-disable sonarjs/cognitive-complexity */
/* eslint-disable sonarjs/no-duplicate-string */
export function validateExploitSchema(data, { instancePath = '' } = {}) {
	const vErrors = null;
	const errors = 0;
	if (errors === 0) {
		if (data && typeof data == 'object' && !Array.isArray(data)) {
			if (data.name !== undefined) {
				const _errs1 = errors;
				if (typeof data.name !== 'string') {
					validateExploitSchema.errors = [
						{
							instancePath: instancePath + '/name',
							schemaPath: '#/properties/name/type',
							keyword: 'type',
							params: {
								type: 'string'
							},
							message: 'must be string'
						}
					];
					return false;
				}
				var valid0 = _errs1 === errors;
			} else {
				var valid0 = true;
			}
			if (valid0) {
				if (data.description !== undefined) {
					const _errs3 = errors;
					if (typeof data.description !== 'string') {
						validateExploitSchema.errors = [
							{
								instancePath: instancePath + '/description',
								schemaPath: '#/properties/description/type',
								keyword: 'type',
								params: {
									type: 'string'
								},
								message: 'must be string'
							}
						];
						return false;
					}
					var valid0 = _errs3 === errors;
				} else {
					var valid0 = true;
				}
				if (valid0) {
					if (data.location !== undefined) {
						const _errs5 = errors;
						if (typeof data.location !== 'string') {
							validateExploitSchema.errors = [
								{
									instancePath: instancePath + '/location',
									schemaPath: '#/properties/location/type',
									keyword: 'type',
									params: {
										type: 'string'
									},
									message: 'must be string'
								}
							];
							return false;
						}
						var valid0 = _errs5 === errors;
					} else {
						var valid0 = true;
					}
					if (valid0) {
						if (data.matches !== undefined) {
							const data3 = data.matches;
							const _errs7 = errors;
							if (errors === _errs7) {
								if (Array.isArray(data3)) {
									var valid1 = true;
									const len0 = data3.length;
									for (let i0 = 0; i0 < len0; i0++) {
										const _errs9 = errors;
										if (typeof data3[i0] !== 'string') {
											validateExploitSchema.errors = [
												{
													instancePath:
														instancePath +
														'/matches/' +
														i0,
													schemaPath:
														'#/properties/matches/items/type',
													keyword: 'type',
													params: {
														type: 'string'
													},
													message: 'must be string'
												}
											];
											return false;
										}
										var valid1 = _errs9 === errors;
										if (!valid1) {
											break;
										}
									}
								} else {
									validateExploitSchema.errors = [
										{
											instancePath:
												instancePath + '/matches',
											schemaPath:
												'#/properties/matches/type',
											keyword: 'type',
											params: {
												type: 'array'
											},
											message: 'must be array'
										}
									];
									return false;
								}
							}
							var valid0 = _errs7 === errors;
						} else {
							var valid0 = true;
						}
						if (valid0) {
							if (data.version !== undefined) {
								const _errs11 = errors;
								if (typeof data.version !== 'string') {
									validateExploitSchema.errors = [
										{
											instancePath:
												instancePath + '/version',
											schemaPath:
												'#/properties/version/type',
											keyword: 'type',
											params: {
												type: 'string'
											},
											message: 'must be string'
										}
									];
									return false;
								}
								var valid0 = _errs11 === errors;
							} else {
								var valid0 = true;
							}
							if (valid0) {
								if (data.uid !== undefined) {
									const _errs13 = errors;
									if (typeof data.uid !== 'string') {
										validateExploitSchema.errors = [
											{
												instancePath:
													instancePath + '/uid',
												schemaPath:
													'#/properties/uid/type',
												keyword: 'type',
												params: {
													type: 'string'
												},
												message: 'must be string'
											}
										];
										return false;
									}
									var valid0 = _errs13 === errors;
								} else {
									var valid0 = true;
								}
							}
						}
					}
				}
			}
		} else {
			validateExploitSchema.errors = [
				{
					instancePath,
					schemaPath: '#/type',
					keyword: 'type',
					params: {
						type: 'object'
					},
					message: 'must be object'
				}
			];
			return false;
		}
	}
	validateExploitSchema.errors = vErrors;
	return errors === 0;
}
