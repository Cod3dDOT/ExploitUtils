import { useState } from 'react';

import type { IExploit, IExploitResponse } from '~lib/exploits/interfaces';
import { runExploit } from '~lib/exploits/runExploit';
import { useTab } from '~popup/hooks';

import { ExploitWindow } from '../exploit';
import { ExploitSelectButton } from './exploit-select-button';

interface ExploitListWindowProps {
	exploits: IExploit[];
}

export const ExploitListWindow: React.FC<ExploitListWindowProps> = ({
	exploits
}) => {
	const { tab } = useTab();
	const [selectedExploit, setSelectedExploit] = useState<IExploit>();
	const [exploitResult, setExploitResult] = useState<IExploitResponse>();

	const onExploitRunCallback = async (exploit: IExploit) => {
		setExploitResult({
			success: false,
			message: '...'
		});
		setExploitResult(await runExploit(exploit, tab?.id || 0));
		setTimeout(() => {
			setExploitResult(undefined);
		}, 3000);
	};

	return (
		<div className="p-1.5 text-center">
			<div className="max-h-40 overflow-y-auto">
				{!selectedExploit ? (
					exploits.map((exploit) => (
						<ExploitSelectButton
							key={'exploit-selector-' + exploit.uid}
							exploit={exploit}
							onExploitCallback={() =>
								setSelectedExploit(exploit)
							}
							onRunCallback={async () => {
								onExploitRunCallback(exploit);
							}}
						/>
					))
				) : (
					<ExploitWindow
						exploit={selectedExploit}
						status={exploitResult}
						onBackCallback={() => {
							setSelectedExploit(undefined);
						}}
						onRunCallback={async () => {
							onExploitRunCallback(selectedExploit);
						}}
					/>
				)}
			</div>
		</div>
	);
};
