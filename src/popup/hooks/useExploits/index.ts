import { useEffect, useState } from 'react';
import type { SemVer } from 'semver';

import type { IExploit, IExploitUID } from '~lib/exploits/interfaces';

// Somehow this will only resolve when not using aliases (yes, I spent 2 days on this)
import { validateExploitSchema } from '../../../lib/exploits/schemas/exploitSchema';

export const useExploits = (
	tab: chrome.tabs.Tab | undefined,
	endpoints: Array<URL>
) => {
	const [loaded, setLoaded] = useState<boolean>(false);
	const [exploits, setExploits] = useState<Array<IExploit>>([]);

	useEffect(() => {
		const fetchExploits = async (url: string) => {
			let total: Array<IExploit> = [];

			for (const endpoint of endpoints) {
				const resp = await fetch(endpoint);

				if (!resp.ok) continue;

				const exploits = await resp.json();
				if (!Array.isArray(exploits)) continue;

				const validExploits = exploits
					.filter(
						(e) =>
							validateExploitSchema(e) &&
							new RegExp(e.url).test(url)
					)
					.map((e) => {
						return {
							name: e.name,
							description: e.description,
							location: e.location,
							matches: [new RegExp(e.url)],
							version: e.version as SemVer,
							uid: e.uid as IExploitUID
						} as IExploit;
					});
				total = total.concat(validExploits);
			}
			setLoaded(true);
			setExploits(total);
		};
		if (!tab || !tab.url) return;
		fetchExploits(tab.url);
	}, [tab]);

	return { loaded, exploits };
};
