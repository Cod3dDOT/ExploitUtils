import { useEffect, useState } from 'react';

import type { IExploit } from '~lib/exploits/interfaces/IExploit';
import ValidateExploit from '~lib/exploits/schemas/ExploitSchema';

export const useExploits = (
	tab: chrome.tabs.Tab | undefined,
	endpoints: Array<URL>
) => {
	const [exploits, setExploits] = useState<Array<IExploit>>([]);

	useEffect(() => {
		const fetchExploits = async (endpoints: Array<URL>) => {
			let total: Array<IExploit> = [];
			for (const endpoint of endpoints) {
				const resp = await fetch(endpoint);
				if (!resp.ok) continue;

				const exploits = await resp.json();
				if (!Array.isArray(exploits)) continue;

				const validExploits = exploits
					.filter((e) => ValidateExploit(e))
					.map((e) => e as IExploit);

				total.concat(validExploits);
			}
			setExploits(total);
		};

		fetchExploits(endpoints);
	}, [tab]);

	return exploits;
};
